# -*- coding: utf-8 -*-
"""system-recommendation-notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ldprdrpB7aJI-J56TQrQwsCpT7UAIWEr

## Import Library dan Data Loading
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error

"""Melakukan loading dataset"""

DATA_PATH = "ml-100k/u.data"

columns = ['user_id', 'item_id', 'rating', 'timestamp']
ratings_df = pd.read_csv(DATA_PATH, sep='\t', names=columns)

movie_cols = [
    'item_id', 'title', 'release_date', 'video_release_date', 'IMDb_URL',
    'unknown', 'Action', 'Adventure', 'Animation', 'Children\'s', 'Comedy', 'Crime',
    'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'Musical', 'Mystery',
    'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western'
]
movies_df = pd.read_csv('ml-100k/u.item', sep='|', names=movie_cols, encoding='latin-1')

df = pd.merge(ratings_df, movies_df[['item_id', 'title']], on='item_id')

"""Mengetahui contoh isi dari dataframe yang sudah digabung"""

df

"""Mengetahui informasi mengenai dataframe seperti jumlah data Non-Null, jumlah kolom, dan tipe data"""

df.info()

"""Mengetahui statistik deskriptif pada dataframe"""

df.describe(include='all')

"""Mengetahui jumlah data yang memiliki missing value"""

missing_value = df.isnull().sum()
print(f"Jumlah missing value: {missing_value}")

"""Mengetahui jumlah data yang duplikat"""

duplicate = df.duplicated().sum()
print(f"Jumlah data duplikat: {duplicate}")

"""Mengetahui berapa baris dan kolom pada data"""

df.shape

"""## Data Understanding

Visualisasi distribusi rating, disini terlihat bahwa pengguna cenderung memberikan rating yang baik, yaitu antara 3 dan 4
"""

plt.figure(figsize=(6, 4))
sns.countplot(x='rating', data=ratings_df)
plt.title('Distribusi Rating')
plt.xlabel('Rating')
plt.ylabel('Jumlah')
plt.tight_layout()
plt.show()

"""Visualisasi Top 10 Film Rating Tertinggi, disini terlihat 10 film klasik yang memang sudah terkenal luas oleh pengguna"""

movie_counts = df['title'].value_counts().head(10)

plt.figure(figsize=(10,5))
sns.barplot(x=movie_counts.values, y=movie_counts.index, palette='YlOrBr')
plt.title('Top 10 Film Rating Tertinggi')
plt.xlabel('Jumlah Rating')
plt.ylabel('Judul Film')
plt.show()

"""## Data Preprocessing

Membuat matriks user-item
"""

user_movie_matrix = df.pivot_table(index='user_id', columns='title', values='rating')

"""Mengisi missing value dengan nilai 0"""

user_movie_matrix_filled = user_movie_matrix.fillna(0)

"""Menghitung cosine similarity antar user"""

user_similarity = cosine_similarity(user_movie_matrix_filled)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

"""## Modelling

Fungsi prediksi rekomendasi film
"""

def recommend_movies(user_id, num_recommendations=5):
    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:11]

    weighted_ratings = pd.Series(dtype='float64')

    for sim_user_id, similarity_score in similar_users.items():
        sim_user_ratings = user_movie_matrix.loc[sim_user_id]
        sim_user_ratings = sim_user_ratings[sim_user_ratings > 0]
        weighted_ratings = weighted_ratings.add(sim_user_ratings * similarity_score, fill_value=0)

    user_rated = user_movie_matrix.loc[user_id]
    recommendations = weighted_ratings[~user_rated.notna()].sort_values(ascending=False).head(num_recommendations)

    return recommendations

"""Contoh prediksi rekomendasi film untuk user_id=40"""

recommendations = recommend_movies(user_id=40, num_recommendations=10)
print(recommendations)

"""Fungsi prediksi rating pada sebuah film"""

def predict_rating(user_id, item_title):
    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:11]
    numerator = 0.0
    denominator = 0.0

    user_mean = user_movie_matrix.loc[user_id].mean()

    for sim_user_id, similarity in similar_users.items():
        rating = user_movie_matrix.loc[sim_user_id, item_title]
        sim_user_mean = user_movie_matrix.loc[sim_user_id].mean()
        if not np.isnan(rating):
            numerator += similarity * (rating - sim_user_mean)
            denominator += abs(similarity)

    if denominator == 0:
        return np.nan
    else:
        return user_mean + (numerator / denominator)

"""Contoh prediksi rating oleh user_id=40"""

predicted_rating = predict_rating(user_id=40, item_title='Titanic (1997)')
print(predicted_rating)

"""## Evaluasi Model

Evaluasi pada 1000 sampel rating
"""

sample_df = df.sample(1000, random_state=42)
y_true = []
y_pred = []

for _, row in sample_df.iterrows():
    true_rating = row['rating']
    predicted_rating = predict_rating(row['user_id'], row['title'])

    if not np.isnan(predicted_rating):
        y_true.append(true_rating)
        y_pred.append(predicted_rating)

mse = mean_squared_error(y_true, y_pred)
rmse = np.sqrt(mse)
print(f"Mean Squared Error: {mse:.4f}")
print(f"Root Mean Squared Error: {rmse:.4f}")

"""## Prediction

Prediksi rekomendasi film untuk user
"""

user_id = 51
num_recommendations = 10

recommendations = recommend_movies(user_id, num_recommendations)
print(f"Rekomendasi film untuk user {user_id}:")
print(recommendations)

"""Prediksi rating user terhadap suatu film"""

user_id = 51
movie_title = 'Star Wars (1977)'

predicted = predict_rating(user_id, movie_title)
if np.isnan(predicted):
    print(f"Tidak cukup data untuk memprediksi rating user {user_id} terhadap '{movie_title}'.")
else:
    print(f"Prediksi rating user {user_id} untuk film '{movie_title}': {predicted:.2f}")
